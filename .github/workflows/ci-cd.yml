name: Complete CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: taskpilot.azurecr.io
  BACKEND_IMAGE: taskpilot-backend
  FRONTEND_IMAGE: taskpilot-frontend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install root dependencies
        run: npm install

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run backend tests
        run: |
          cd backend
          npm test
        continue-on-error: true

      - name: Run frontend tests
        run: |
          cd frontend
          npm test
        continue-on-error: true

  security:
    name: Security Scans
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # CodeQL static analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      # Dependency scan for Node.js
      - name: Run npm audit
        run: |
          npm install
          npm audit --audit-level high
        continue-on-error: true

      # Container scan (Trivy)
      - name: Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'

      # Secrets scan
      - name: TruffleHog Scan
        uses: trufflesecurity/trufflehog@main

  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Build and push backend image
      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push frontend image  
      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  image-scan:
    name: Scan Docker Images
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Scan backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Scan frontend image
        uses: aquasecurity/trivy-action@master  
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: '.'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, image-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://taskpilot.azurewebsites.net
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy backend to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'taskpilot-webapp'
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}

      - name: Deploy frontend to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'taskpilot'
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, image-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://taskpilot.azurewebsites.net
    steps:
      - name: Await Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ github.repository_owner }}
          issue-title: "Production Deployment Approval Required"
          issue-body: |
            **Deployment Details:**
            - **Backend Image:** ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
            - **Frontend Image:** ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
            - **Commit:** ${{ github.sha }}
            - **Branch:** ${{ github.ref_name }}
            
            Please review and approve this production deployment.

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy backend to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'taskpilot-webapp'
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}

      - name: Deploy frontend to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'taskpilot'
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

  monitor:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Health Check - Frontend
        uses: jtalk/url-health-check-action@v4
        with:
          url: 'https://taskpilot.azurewebsites.net'
          max-attempts: 3
          retry-delay: 10s
          follow-redirect: true

      - name: Health Check - Backend
        uses: jtalk/url-health-check-action@v4
        with:
          url: 'https://taskpilot-webapp.azurewebsites.net'
          max-attempts: 3
          retry-delay: 10s
          follow-redirect: true
